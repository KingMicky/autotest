name: github-actions-performance-testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - load
        - stress
        - spike
      target_url:
        description: 'Target URL for testing'
        required: false
        default: 'https://httpbin.org'

env:
  BASE_URL: ${{ github.event.inputs.target_url || 'https://httpbin.org' }}
  TEST_TYPE: ${{ github.event.inputs.test_type || 'smoke' }}

jobs:
  performance-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        tool: [k6, artillery]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install K6
      if: matrix.tool == 'k6'
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Install Artillery
      if: matrix.tool == 'artillery'
      run: npm install -g artillery@latest

    - name: Create reports directory
      run: mkdir -p reports

    - name: Run K6 Performance Tests
      if: matrix.tool == 'k6'
      run: |
        case "$TEST_TYPE" in
          smoke)
            k6 run --out json=reports/k6-results.json k6/smoke-test.js
            ;;
          load)
            k6 run --out json=reports/k6-results.json k6/basic-load-test.js
            ;;
          stress)
            k6 run --out json=reports/k6-results.json k6/stress-test.js
            ;;
          spike)
            k6 run --out json=reports/k6-results.json k6/spike-test.js
            ;;
        esac

    - name: Run Artillery Performance Tests
      if: matrix.tool == 'artillery'
      env:
        TARGET_URL: ${{ env.BASE_URL }}
      run: |
        # Generate config with environment variables
        node scripts/process-template.js artillery/basic-load-test.template.yml artillery/runtime-config.yml
        artillery run artillery/runtime-config.yml --output reports/artillery-results.json
        node scripts/generate-artillery-report.js reports/artillery-results.json reports/artillery-report.html

    - name: Generate Performance Report
      run: node scripts/generate-report.js

    - name: Upload Performance Reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports-${{ matrix.tool }}
        path: reports/
        retention-days: 30

    - name: Performance Budget Check
      run: |
        echo "Checking performance budgets..."
        node scripts/check-budgets.js reports/

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'reports/summary.json';
          
          if (fs.existsSync(path)) {
            const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
            const comment = `## üöÄ Performance Test Results
            
            **Test Type:** ${{ env.TEST_TYPE }}
            **Tool:** ${{ matrix.tool }}
            **Target:** ${{ env.BASE_URL }}
            
            ### Key Metrics
            - **Average Response Time:** ${summary.avgResponseTime}ms
            - **95th Percentile:** ${summary.p95}ms
            - **Error Rate:** ${summary.errorRate}%
            - **Throughput:** ${summary.throughput} req/s
            
            ### Status
            ${summary.status === 'PASS' ? '‚úÖ All thresholds passed' : '‚ùå Some thresholds failed'}
            
            [View detailed report](${summary.reportUrl})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  notify-teams:
    runs-on: ubuntu-latest
    needs: performance-test
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Teams on Failure
      run: |
        curl -H "Content-Type: application/json" -d '{
          "text": "üî• Performance tests failed on main branch! Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }' "${{ secrets.TEAMS_WEBHOOK_URL }}"
