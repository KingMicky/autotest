trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - k6/*
      - artillery/*
      - jmeter/*
      - scripts/*

pr:
  branches:
    include:
      - main

schedules:
- cron: "0 2 * * *"
  displayName: Daily performance test
  branches:
    include:
    - main

parameters:
- name: testType
  displayName: Test Type
  type: string
  default: smoke
  values:
  - smoke
  - load
  - stress
  - spike

- name: targetUrl
  displayName: Target URL
  type: string
  default: https://httpbin.org

- name: tool
  displayName: Testing Tool
  type: string
  default: k6
  values:
  - k6
  - artillery
  - both

variables:
  baseUrl: ${{ parameters.targetUrl }}
  testType: ${{ parameters.testType }}
  tool: ${{ parameters.tool }}

stages:
- stage: Performance_Tests
  displayName: Performance Tests
  jobs:
  - job: K6_Tests
    condition: or(eq(variables.tool, 'k6'), eq(variables.tool, 'both'))
    displayName: K6 Performance Tests
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: npm ci
      displayName: 'Install dependencies'

    - script: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
      displayName: 'Install K6'

    - script: mkdir -p reports
      displayName: 'Create reports directory'

    - script: |
        case "$(testType)" in
          smoke)
            k6 run --out json=reports/k6-results.json k6/smoke-test.js
            ;;
          load)
            k6 run --out json=reports/k6-results.json k6/basic-load-test.js
            ;;
          stress)
            k6 run --out json=reports/k6-results.json k6/stress-test.js
            ;;
          spike)
            k6 run --out json=reports/k6-results.json k6/spike-test.js
            ;;
        esac
      env:
        BASE_URL: $(baseUrl)
      displayName: 'Run K6 Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/k6-junit.xml'
        failTaskOnFailedTests: false
      displayName: 'Publish K6 Test Results'
      condition: always()

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'reports'
        artifact: 'k6-reports'
      displayName: 'Publish K6 Reports'
      condition: always()

  - job: Artillery_Tests
    condition: or(eq(variables.tool, 'artillery'), eq(variables.tool, 'both'))
    displayName: Artillery Performance Tests
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: npm ci
      displayName: 'Install dependencies'

    - script: npm install -g artillery@latest
      displayName: 'Install Artillery'

    - script: mkdir -p reports
      displayName: 'Create reports directory'

    - script: |
        artillery run artillery/basic-load-test.yml --output reports/artillery-results.json
        artillery report reports/artillery-results.json --output reports/artillery-report.html
      env:
        TARGET_URL: $(baseUrl)
      displayName: 'Run Artillery Tests'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'reports'
        artifact: 'artillery-reports'
      displayName: 'Publish Artillery Reports'
      condition: always()

- stage: Generate_Reports
  displayName: Generate Reports
  dependsOn: Performance_Tests
  jobs:
  - job: Report_Generation
    displayName: Generate Performance Reports
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: npm ci
      displayName: 'Install dependencies'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download artifacts'

    - script: |
        cp -r $(System.ArtifactsDirectory)/*/* reports/ 2>/dev/null || true
        node scripts/generate-report.js
      displayName: 'Generate consolidated report'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'reports'
        artifact: 'performance-reports'
      displayName: 'Publish consolidated reports'

- stage: Budget_Check
  displayName: Performance Budget Check
  dependsOn: Generate_Reports
  jobs:
  - job: Budget_Validation
    displayName: Validate Performance Budgets
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: npm ci
      displayName: 'Install dependencies'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        artifactName: 'performance-reports'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download reports'

    - script: |
        cp -r $(System.ArtifactsDirectory)/performance-reports/* reports/
        node scripts/check-budgets.js reports/
      displayName: 'Check performance budgets'
